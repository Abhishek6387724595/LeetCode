class Solution {
public:
    vector<int> selfDividingNumbers(int left, int right) {
        vector<int> v1;
        int rem;
        for(int i=left;i<=right;i++)
        {
            bool isdivisible = true;
            int number = i;
                while(number>0)
                {
                    rem = number%10;
                    if(rem==0 || i%rem!=0)
                    {
                        isdivisible = false;
                        break;
                    }
                    number=number/10;
                }
                if(isdivisible)
                {
                    v1.push_back(i);
                }
        }return v1;
    }
};

********************************************************************** Bollean as a Function**************************************************************************

#include<bits/stdc++.h>
#include <iostream>
#include <vector>
using namespace std;

bool isdivisible(int i)
{
    int rem;
    int num = i;
    while(num!=0)
    {
        rem = num%10;
        if(rem==0 || i%rem!=0){
            return false;
        }
        num/=10;
    }return true;
}

int main(){
    vector<int> v1;
    int left = 1;
    int right = 22;
    for(int i=left;i<=right;i++)
    {
        if(isdivisible(i)==true)
        {
            v1.push_back(i);
        }
    }
    for(int i=0;i<v1.size();i++)
    {
        cout<<v1[i]<<" ";
    }
}
