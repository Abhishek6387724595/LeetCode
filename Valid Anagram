************************************************************************Using UNORDERED_MAP (Time Complexity=52% fatser)**********************************************
class Solution {
public:
    bool isAnagram(string s, string t) {
        unordered_map<int,int> mp1;
        int n1 = s.length();
        int n2 = t.length();
        
        if(n1!=n2){
            return false;
        }
        
        for(int i=0;i<n1;i++)
        {
            mp1[s[i]]++;
        }
        
        for(int i=0;i<n2;i++)
        {
            mp1[t[i]]--;
        }
        
        for(int i=0;i<mp1.size();i++)
        {
            if(mp1[i]!=0)
            {
                return false;
            }
        }
        return true;
        }
    };
    
************************************************************************Using MAP (Time Complexity=27% fatser)********************************************************

class Solution {
public:
    bool isAnagram(string s, string t) {
        map<int,int> mp1;
        int n1 = s.length();
        int n2 = t.length();
        
        if(n1!=n2){
            return false;
        }
        
        for(int i=0;i<n1;i++)
        {
            mp1[s[i]]++;
        }
        
        for(int i=0;i<n2;i++)
        {
            mp1[t[i]]--;
        }
        
        for(int i=0;i<mp1.size();i++)
        {
            if(mp1[i]!=0)
            {
                return false;
            }
        }
        return true;
        }
    };
    
************************************************************************Using SORTING (Time Complexity=20% fatser)************************************************
    
class Solution {
public:
    bool isAnagram(string s, string t) {
        
        int n1 = s.length();
        int n2 = t.length();
        
        if(n1!=n2){
            return false;
        }
        
        sort(s.begin(),s.end());
        sort(t.begin(),t.end());
        
        for(int i=0;i<n1;i++)
        {
            if(s[i]!=t[i]){
                return false;
            }
        }return true;
    }
};
