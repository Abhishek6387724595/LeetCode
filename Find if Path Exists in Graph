class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) 
    {
        unordered_map<int,vector<int>>m1;
        for(int i=0;i<edges.size();i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            m1[u].push_back(v);
            m1[v].push_back(u);
            
        }
//         for(auto x:edges)
//         {
//             vector<int>temp=x;
//             int u=temp[0];           
                                        // this for loop is also right,just
                                        // implemented above for loop to 
                                        // learn the new concept of how to 
                                        // take out elements from 2D Matrix
//             int v=temp[1];
            
//             m1[u].push_back(v);
//             m1[v].push_back(u);
//         }
                
        //int m=m1.size();
        vector<int>vis(n,false);
        queue<int>q1;
        q1.push(source);
        vis[source]=true;

        while(!q1.empty())
        {
            int k=q1.front();
            q1.pop();
            if(k==destination){return true;}
            vector<int>res=m1[k];
            for(int i=0;i<res.size();i++)
            {
                int vertex=res[i];
                if(vis[vertex]==false)
                {
                    q1.push(vertex);
                    vis[vertex]=true;
                }
            }
            
        }
        return false;
    }
};
