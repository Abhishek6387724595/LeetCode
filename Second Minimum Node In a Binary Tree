/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findSecondMinimumValue(TreeNode* root) {
        vector<int>v1;
        if(root==NULL){return 0;}
        set<int> v;
        if(root==NULL){return 0;}
        queue<TreeNode*>q1;
        q1.push(root);
        while(q1.empty()==false){
            TreeNode* curr=q1.front();
            v.insert(curr->val);
            v1.push_back(curr->val);
            q1.pop();
            if(curr->left!=NULL)
            {
                q1.push(curr->left);
            }
            if(curr->right!=NULL)
            {
                q1.push(curr->right);
            }
        }
        int n=v1.size();
        if(n<=2){return -1;}
        if((v1[0]==v1[n-1])&&(v1[0]==v1[n-2])&&(v1[2]==v1[n-1])){
            return -1;
        }
        auto itr = v.begin();
        return *++itr;
    }
};
